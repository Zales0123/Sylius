name: Application with PostgreSQL

on:
    push:
        paths-ignore:
            - "adr/**"
            - "docs/**"
            - "*.md"

jobs:
    test-application-without-frontend:
        runs-on: ubuntu-18.04

        name: "Test non-JS application (PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }}"

        timeout-minutes: 25

        strategy:
            fail-fast: false
            matrix:
                php: [7.4]
                symfony: [^5.2]

        services:
            postgres:
                image: postgres:10.8
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: postgres
                ports:
                    - 5432/tcp
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 3

        env:
            APP_ENV: test_cached
            DATABASE_URL: "postgres://postgres:postgres@127.0.0.1:5432/postgres?charset=UTF-8"

        steps:
            -
                uses: actions/checkout@v2

            -   name: Setup PHP, with composer and extensions
                uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
                with:
                    php-version: ${{ matrix.php }}
                    extensions: mbstring, xml, ctype, intl, gd, opcache, pgsql, pdo_pgsql, :xdebug
                    tools: symfony
                    coverage: none

            -
                name: Restrict Symfony version
                if: matrix.symfony != ''
                run: |
                    composer global require --no-progress --no-scripts --no-plugins "symfony/flex:^1.10"
                    composer config extra.symfony.require "${{ matrix.symfony }}"

            -
                name: Get Composer cache directory
                id: composer-cache
                run: echo "::set-output name=dir::$(composer config cache-files-dir)"

            -
                name: Cache Composer
                uses: actions/cache@v2
                with:
                    path: ${{ steps.composer-cache.outputs.dir }}
                    key: ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-${{ hashFiles('**/composer.json') }}
                    restore-keys: |
                        ${{ runner.os }}-php-${{ matrix.php }}-symfony-${{ matrix.symfony }}-composer-

            -
                name: Install PHP dependencies
                run: composer update --no-interaction --no-scripts

            -
                name: Dump the environment
                run: |
                    echo "DATABASE_URL=$DATABASE_URL" >> .env.$APP_ENV
                    composer dump-env $APP_ENV

            -
                name: Warmup cache
                run: bin/console cache:warmup

            -
                name: Make filesystem readonly
                run: chmod -R 555 app bin config docs features src templates tests translations vendor

            -
                name: Prepare application database
                run: |
                    APP_DEBUG=1 bin/console doctrine:database:create -vvv
                    bin/console doctrine:migrations:migrate -n -vvv

            -
                name: Test provided migrations
                run: |
                    bin/console doctrine:migrations:migrate first --no-interaction
                    bin/console doctrine:migrations:migrate latest --no-interaction
                    bin/console doctrine:schema:validate --skip-mapping -vvv

            -
                name: Load fixtures
                run: bin/console sylius:fixtures:load default --no-interaction

            -
                name: Run non-JS Behat
                run: vendor/bin/behat --colors --strict --no-interaction -vvv -f progress --tags="~@javascript && ~@todo && ~@cli" || vendor/bin/behat --strict --no-interaction -vvv -f progress --tags="~@javascript && ~@todo && ~@cli" --rerun

            -
                name: Upload Behat logs
                uses: actions/upload-artifact@v2
                if: failure()
                with:
                    name: "Behat logs (non-JS, PHP ${{ matrix.php }}, Symfony ${{ matrix.symfony }})"
                    path: etc/build/
                    if-no-files-found: ignore
